#!/bin/bash

[ -f "$(which tgpt)" ] || exit 1
[ -f "$(which main)" ] || { echo "'whisper.cpp/' should be in your \$PATH!"; exit 1; }
[ -f "$(which whiptail)" ] || exit 1
[ -f "$(which mpv)" ] || exit 1
[ -f "$(which arecord)" ] || exit 1
[ -f "$(which ffmpeg)" ] || exit 1
[ -f "$(which xclip)" ] || exit 1

TERM=ansi
MINIMAL_MODE=false
[ -z "$WHISPER_MODELS_DIR" ] && { echo "you should 'export WHISPER_MODELS_DIR' path"; exit 1; }

audio_file="/tmp/vocalize.wav"
text_file="${audio_file%.wav}.txt"
enriched_transcription_file="${text_file%.txt}-enriched.txt"

cat <<EOF >/tmp/vocalize-prompt
**Instruções para Correção de Texto:**

Revise a transcrição de áudio fornecida abaixo e faça correções gramaticais e ortográficas para criar uma versão mais clara e profissional do texto original. A saída deve ser somente o texto corrigido, sem qualquer comentário adicional.

**Diretrizes de Correção:**

1. **Erros Gramaticais e Ortográficos:** Corrija todos os erros gramaticais e ortográficos presentes no texto.
2. **Pontuação:** Ajuste a pontuação conforme necessário para melhorar a leitura.
3. **Falações Informais:** Remova coloquialismos ou expressões informais que não contribuam para a clareza do texto.
4. **Tom Natural:** Mantenha o tom natural da conversa, mas busque aumentar a clareza e a formalidade quando apropriado.
5. **Estrutura e Conteúdo:** Evite alterações significativas na estrutura ou no conteúdo do texto original; mantenha a essência da mensagem.
6. **Fluidez:** Adicione ou remova palavras quando necessário para melhorar a fluidez da leitura.
7. **Estilo:** Preserve o estilo informal da transcrição original, mas em uma forma mais polida.
8. **Correções de Palavras:** Corrija palavras escritas incorretamente, garantindo que sejam usadas corretamente no contexto.

**Resultado:** Ao final, forneça uma versão corrigida que seja concisa, clara e fiel ao texto original, sem qualquer comentário adicional.

Exemplo:

**Texto para correção:**

 Eu estou testando o vocalize e, parentemente, tudo está funcionando corretamente.
 Eu gostando muito das funções implementadas.
 Gostei muito do resultado final da aplicação.

**Resultado:**

Eu estou testando o Vocalize e, aparentemente, tudo está funcionando corretamente. Gosto muito das funções implementadas. Gostei muito do resultado final da aplicação.

Agora corrija o texto a seguir:
EOF

play_audio() {
	clear
	printf "\033[8;40;100t"
	printf "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
	printf "\033[13C  ╔══════════════════════════╗\n"
	printf "\033[13C  ║     MPV Running...       ║\n"
	printf "\033[13C  ╚══════════════════════════╝\n"

	mpv --no-video --input-terminal=yes "$audio_file"
}

record_audio() {

	echo "Iniciando gravação do áudio. Pressione Cancel para interromper a gravação."
	arecord -f cd -t wav "$audio_file" >/dev/null 2>&1 &

	arecord_pid=$!

	whiptail --title "Gravação de Áudio" --yesno "A gravação está em andamento. Deseja salvar o áudio?" 10 50
	response=$?

	kill -SIGINT $arecord_pid

	# May God forgive this workaround
	mv "$audio_file" /tmp/aux.wav
	ffmpeg -i /tmp/aux.wav -ar 16000 "$audio_file"

	if [ $response -ne 0 ]; then
		echo "Gravação do áudio cancelada."
		rm -f "$audio_file"
		return 1
	fi

	return 0
}

save_audio() {
	file_name=$(whiptail --inputbox "Digite um nome para salvar o áudio:" 10 50 3>&1 1>&2 2>&3)

	if [ -z "$file_name" ]; then
		echo "Nome de arquivo inválido. Ação cancelada."
		return
	fi

	cp "$audio_file" "$HOME/$file_name.wav"
	echo "O arquivo foi copiado para: $HOME/$file_name"
}

open_transcribed_audio() {
	whiptail --title "Vocalize" --scrolltext --textbox "$text_file" 12 80
}

remove_transcribed_audio() {
	rm -f "$text_file"
	whiptail --title "Vocalize" --msgbox "Texto removido!" 12 80
}

save_transcribed_audio() {
	file_name=$(whiptail --inputbox "Digite um nome para salvar o arquivo:" 10 50 3>&1 1>&2 2>&3)

	if [ -z "$file_name" ]; then
		echo "Nome de arquivo inválido. Ação cancelada."
		return
	fi

	cp "$text_file" "$HOME/$file_name.txt"
	echo "O arquivo foi copiado para: $HOME/$file_name"
}

transcribe_audio() {
	whiptail --title "Vocalize" --infobox "Transcrevendo o audio, aguarde..." 12 80
	main -f "$audio_file" \
		-l pt \
		-np \
		-m "$WHISPER_MODELS_DIR/ggml-base.bin" \
		-otxt \
		-of "${text_file%.txt}"
	[ "$MINIMAL_MODE" = false ] && open_transcribed_audio
}

copy_transcribed_audio_to_clipboard() {
	selected_file="$1"
	cat "${selected_file}" | xclip -selection clipboard
	if [ "$MINIMAL_MODE" = false ]; then
		whiptail --title "Vocalize" --msgbox "Texto copiado para a clipboard!" 12 80
		clear
	else
		clear
		echo "Texto copiado para a clipboard!"
	fi
}

enrich_transcription() {
	tgpt -q --preprompt "$(cat /tmp/vocalize-prompt)" "$(cat $text_file)" >$enriched_transcription_file
	[ "$MINIMAL_MODE" = false ] && whiptail --title "Vocalize" --scrolltext --textbox "$enriched_transcription_file" 12 80
}

record_and_transcribe() {
	if ! record_audio; then
		whiptail --title "Operação cancelada" --msgbox "A gravação foi cancelada." 12 80
		clear
		return 1
	fi
	transcribe_audio
	enrich_transcription
	copy_transcribed_audio_to_clipboard "${text_file%.txt}-enriched.txt"
	sleep 1
}

cleanup_old_files() {
	rm -f "$audio_file"
	rm -f "$text_file"
	rm -f "$enriched_transcription_file"
}

# If called with no '-r' option, show all options
main_vocalize() {
	while true; do
		if [ -f "$audio_file" ] && [ ! -f "$text_file" ]; then
			menu_choices=("Gravar" "Excluir Áudio" "Ouvir" "Salvar" "Transcrever(experimental)")
		elif [ -f "$audio_file" ] && [ -f "$text_file" ]; then
			menu_choices=("Gravar" "Excluir Áudio" "Ouvir" "Salvar Áudio"
				"Abrir Transcrição(experimental)"
				"Salvar Transcrição(experimental)"
				"Excluir Transcrição(experimental)"
				"Copiar para a Clipboard(experimental)"
				"Melhorar texto com IA(experimental)"
			)
		else
			menu_choices=("Gravar")
		fi

		menu_options=()
		for choice in "${menu_choices[@]}"; do
			menu_options+=("$choice" "")
		done

		chosen_option=$(whiptail --title "Vocalize" --menu "Escolha uma opção:" 15 40 9 "${menu_options[@]}" 3>&1 1>&2 2>&3)

		case $chosen_option in
		"Gravar")
			record_audio
			;;
		"Excluir Áudio")
			rm -f "$audio_file"
			whiptail --title "Vocalize" --msgbox "Arquivo removido!" 12 80
			;;
		"Ouvir")
			play_audio
			;;
		"Salvar")
			save_audio
			;;
		"Abrir Transcrição(experimental)")
			open_transcribed_audio
			;;
		"Salvar Transcrição(experimental)")
			save_transcribed_audio
			;;
		"Copiar para a Clipboard(experimental)")
			copy_transcribed_audio_to_clipboard "$text_file"
			;;
		"Excluir Transcrição(experimental)")
			remove_transcribed_audio
			;;
		"Melhorar texto com IA(experimental)")
			enrich_transcription
			copy_transcribed_audio_to_clipboard "$enriched_transcription_file"
			;;
		"Transcrever(experimental)")
			transcribe_audio
			;;
		*)
			echo "Operação cancelada"
			clear
			break
			;;
		esac
	done
}

while getopts ":mti" opt; do
	case ${opt} in
	m)
		MINIMAL_MODE=true
		;;
	t)
		MINIMAL_MODE=true
		copy_transcribed_audio_to_clipboard "$text_file"
		exit 0
		;;
	i)
		MINIMAL_MODE=true
		copy_transcribed_audio_to_clipboard "$enriched_transcription_file"
		exit 0
		;;
	\?)
		echo "Uso: $0 [-m]"
		exit 1
		;;
	esac
done

cleanup_old_files
if [ "$MINIMAL_MODE" = true ]; then
	record_and_transcribe
else
	main_vocalize
fi
